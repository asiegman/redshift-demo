---
# This is not a production ready template.  I did not factor in security or
# innerworkings with other infrastructure as this is just for a proof of
# concept.
#
# I've made some basic assumptions to complete this task.  They are:
# - A public subnet is okay for now
# - We don't care if the whole world can talk to the cluster
# - You have no infrastructure, and want to build out the required VPC and
#   other resources as well.
# - You'll want a multi-node cluster.  The template should handle single-node
#   but I did not test that.
#
# Typically you'd want to restrict the security group to the appropriate
# infrastructure, potentially encrypt the data at rest, and quite a few other
# considerations in a real world context.  These details would be worked out
# during the application and infrastructure development cycle.
#
# I also didn't organize this as one might by putting logical resource in
# stacks that you can reference from a main stack file.  Using imports would
# help organize this code, but again, I like to organize in a way that makes
# sense with my supported environment.  For this scenario, I chose to leave
# this a flat file.
#
# The task was:
#
# Create a cloudformation template AND a terraform module that creates the following resources:
#     An S3 bucket with private default acl
#     A redshift cluster with IAM role that allows read/write access to the bucket
#     Input parameters:
#         Number of nodes
#         Node type/size
#         Name of bucket/cluster
#         Charge Code tag to be applied to all resources
#         Any other parameters you think are required
#     Outputs:
#         Redshift endpoint
#         S3 bucket ARN
#         Any other information you think would be useful to have as an output
#
# As far as applying the "Charge Code" tag, you could also just apply this on
# the stack at creation time.  I've put it specifically on a few resources as
# an example, but more likely you'd have a wrapped/sub-stack that you would
# then tag the whole thing, or you'd tag the stack itself at creation.

AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  ClusterName:
    Description: A name for uniquely identified resources (S3, Redshift, etc)
    Type: String
    MinLength: 2
    ConstraintDescription: Must be at least 2 characters long
  ChargeCode:
    Description: Charge Code tag for billing purposes
    Type: String
    MinLength: 2
    ConstraintDescription: Must be at least 2 characters long.  Must track all
      the billing!
  DatabaseName:
    Description: The name of the first database to be created when the cluster
      is created
    Type: String
    Default: dev
    AllowedPattern: "([a-z]|[0-9])+"
  ClusterType:
    Description: The type of cluster
    Type: String
    Default: single-node
    AllowedValues:
    - single-node
    - multi-node
  NumberOfNodes:
    Description: The number of compute nodes in the cluster. For multi-node
      clusters, the NumberOfNodes parameter must be greater than 1
    Type: Number
    Default: '1'
  NodeType:
    Description: The type of node to be provisioned
    Type: String
    Default: ds2.xlarge
    AllowedValues:
    - ds2.xlarge
    - ds2.8xlarge
    - dc1.large
    - dc1.8xlarge
  MasterUsername:
    Description: The user name that is associated with the master user account
      for the cluster that is being created
    Type: String
    Default: defaultuser
    AllowedPattern: "([a-z])([a-z]|[0-9])*"
  MasterUserPassword:
    Description: The password that is associated with the master user account for
      the cluster that is being created.
    Type: String
    NoEcho: 'true'
  InboundTraffic:
    Description: Allow inbound traffic to the cluster from this CIDR range.
    Type: String
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid CIDR range of the form x.x.x.x/x.
  PortNumber:
    Description: The port number on which the cluster accepts incoming connections.
    Type: Number
    Default: '5439'

Conditions:
  IsMultiNodeCluster:
    Fn::Equals:
    - Ref: ClusterType
    - multi-node

#####

Resources:
  RedshiftS3Bucket:
    Type: "AWS::S3::Bucket"
    Properties:
      AccessControl: Private
      BucketName: !Join ['-', [!Ref ClusterName, 'cluster', 'bucket']]
      Tags:
        - Key: ChargeCode
          Value: !Ref ChargeCode

  RedshiftIAMRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      RoleName: !Join ['', [!Ref ClusterName, "Role"]]

  RedshiftIAMPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      Roles:
        - !Ref RedshiftIAMRole
      PolicyName: !Join ['', [!Ref ClusterName, "Policy"]]
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: "s3:*"
            Effect: Allow
            Resource:
              - !Join ['', ['arn:aws:s3:::', !Ref RedshiftS3Bucket]]
              - !Join ['', ['arn:aws:s3:::', !Ref RedshiftS3Bucket, '/*']]

  RedshiftCluster:
    Type: AWS::Redshift::Cluster
    DependsOn: AttachGateway
    Properties:
      ClusterType: !Ref ClusterType
      NumberOfNodes: !If [IsMultiNodeCluster, !Ref NumberOfNodes, !Ref 'AWS::NoValue']
      NodeType: !Ref NodeType
      DBName: !Ref DatabaseName
      MasterUsername: !Ref MasterUsername
      MasterUserPassword: !Ref MasterUserPassword
      ClusterParameterGroupName: !Ref RedshiftClusterParameterGroup
      VpcSecurityGroupIds:
        - !Ref SecurityGroup
      ClusterSubnetGroupName: !Ref RedshiftClusterSubnetGroup
      PubliclyAccessible: 'true'
      Port: !Ref PortNumber
      Tags:
        - Key: ChargeCode
          Value: !Ref ChargeCode

  RedshiftClusterParameterGroup:
    Type: AWS::Redshift::ClusterParameterGroup
    Properties:
      Description: Cluster parameter group
      ParameterGroupFamily: redshift-1.0
      Parameters:
      - ParameterName: enable_user_activity_logging
        ParameterValue: 'true'

  RedshiftClusterSubnetGroup:
    Type: AWS::Redshift::ClusterSubnetGroup
    Properties:
      Description: Cluster subnet group
      SubnetIds:
        - !Ref PublicSubnet

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: ChargeCode
          Value: !Ref ChargeCode

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.0/24
      VpcId: !Ref VPC

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group
      SecurityGroupIngress:
      - CidrIp: !Ref InboundTraffic
        FromPort: !Ref PortNumber
        ToPort: !Ref PortNumber
        IpProtocol: tcp
      VpcId: !Ref VPC

  myInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: ChargeCode
          Value: !Ref ChargeCode

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref myInternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref myInternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

#####

Outputs:
  ClusterEndpoint:
    Description: Cluster endpoint
    Value: !Sub "${RedshiftCluster.Endpoint.Address}:${RedshiftCluster.Endpoint.Port}"

  ClusterName:
    Description: Name of cluster
    Value: !Ref RedshiftCluster

  ParameterGroupName:
    Description: Name of parameter group
    Value: !Ref RedshiftClusterParameterGroup

  RedshiftClusterSubnetGroupName:
    Description: Name of cluster subnet group
    Value: !Ref RedshiftClusterSubnetGroup

  RedshiftClusterSecurityGroupName:
    Description: Name of cluster security group
    Value: !Ref SecurityGroup

  S3BucketARN:
    Description: ARN of the S3 bucket that the redshift cluster has access to
    Value: !GetAtt RedshiftS3Bucket.Arn
